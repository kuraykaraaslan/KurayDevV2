// Auth, Blog, and Profile schemas

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  userId        String          @id @default(cuid())
  name          String?

  email         String          @unique
  emailVerified DateTime?

  image         String?
  sessions      Session[]

  phone         String?
  phoneVerified DateTime?

  password      String?
  passwordResetToken String?


  phoneVerificationToken String?
  emailVerificationToken String?

  //Adress
  adressLine1   String?
  adressLine2   String?
  adressCity    String?
  adressState   String?
  adressZip     String?
  adressCountry String?

  //Role
  role          String          @default("USER")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  Post Post[]

  Comment Comment[]
}


model Session {

  sessionToken String   @unique

  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

 
model Post {
  postId          String   @id @default(cuid())
  title           String
  content         String

  author          User     @relation(fields: [authorId], references: [userId])
  authorId        String
  description     String?
  slug            String   @unique

  keywords        String[] // List of SEO keywords
  image        String?  // URL of the image stored in AWS S3
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  publishedAt     DateTime @default(now())

  status          String   @default("PUBLISHED") // DRAFT, PUBLISHED, ARCHIVED

  categoryId      String
  Category Category @relation(fields: [categoryId], references: [categoryId])

  Comment Comment[]
}

model Category {
  categoryId      String   @id @default(cuid())
  title           String

  description     String?
  slug            String   @unique

  keywords        String[] // List of SEO keywords
  image        String?  // URL of the image stored in AWS S3

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Post Post[]
}

model Comment {
  commentId       String   @id @default(cuid())
  isAnonymous     Boolean  @default(false)

  content         String
  createdAt       DateTime @default(now())

  postId          String
  post            Post     @relation(fields: [postId], references: [postId])

  userId          String?
  user            User?    @relation(fields: [userId], references: [userId])

  parentId        String?
  parent          Comment? @relation("CommentToComment", fields: [parentId], references: [commentId])

  comment Comment[] @relation("CommentToComment")
} 