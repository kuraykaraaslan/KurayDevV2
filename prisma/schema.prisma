generator client {
  provider   = "prisma-client-js"
  accelerate = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OTPMethod {
  EMAIL
  SMS
  TOTP_APP // (e.g. Authenticator apps)
  PUSH_APP // (e.g. Your own mobile app with push notification)
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

model User {
  userId   String  @id @default(cuid())
  email    String  @unique
  phone    String? @unique
  password String

  name     String?
  lastName String?

  userRole   UserRole   @default(USER)
  userStatus UserStatus @default(ACTIVE)

  //Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  //Profile
  profilePicture String?

  //OTP verification
  otpMethods OTPMethod[] @default([])
  otpSecret  String?

  userSessions       UserSession[]
  userSocialAccounts UserSocialAccount[]

  //User Nationalty
  userNationalityId      String?
  userNationalityCountry String?

  // Relations
  posts Post[]
  likes Like[]

  //index
  @@index([email])
  @@index([phone])
}

model UserSession {
  userSessionId String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  accessToken  String @unique
  refreshToken String @unique

  sessionExpiry DateTime

  //OTP Needed
  otpVerifyNeeded Boolean   @default(false)
  otpVerifiedAt   DateTime?

  // User Agent
  ip      String?
  os      String?
  device  String?
  browser String?
  city    String?
  state   String?
  country String?

  deviceFingerprint String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model UserSocialAccount {
  userSocialAccountId String @id @default(cuid())
  userId              String
  user                User   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  provider       String // google, facebook, etc
  providerId     String    @unique
  accessToken    String?
  refreshToken   String?
  tokenExpiry    DateTime?
  profilePicture String?
  profileUrl     String?
  scopes         String? // Store granted scopes as a comma-separated list if needed

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([provider, providerId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Post {
  postId      String    @id @default(cuid())
  title       String
  content     String
  authorId    String
  description String?
  slug        String    @unique
  keywords    String[]
  createdAt   DateTime  @default(now())
  categoryId  String
  image       String?
  status      String    @default("PUBLISHED")
  views       Int       @default(0)
  deletedAt   DateTime?

  comment  Comment[]
  author   User      @relation(fields: [authorId], references: [userId])
  category Category  @relation(fields: [categoryId], references: [categoryId])
  likes    Like[]
}

model Category {
  categoryId  String   @id @default(cuid())
  title       String
  description String?
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  image       String?
  keywords    String[]

  posts Post[]
}

enum CommentStatus {
  NOT_PUBLISHED
  PUBLISHED
  SPAM
}

model Comment {
  commentId String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  postId    String
  parentId  String?
  email     String?
  name      String?

  parent   Comment?  @relation("CommentToComment", fields: [parentId], references: [commentId])
  children Comment[] @relation("CommentToComment")
  post     Post      @relation(fields: [postId], references: [postId])

  status CommentStatus @default(NOT_PUBLISHED)
}

model ContactForm {
  contactId String   @id @default(cuid())
  name      String
  email     String
  phone     String
  message   String
  createdAt DateTime @default(now())
}

model Subscription {
  email     String    @id @unique
  createdAt DateTime  @default(now())
  deletedAt DateTime?
}

model Setting {
  key       String   @id @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     String   @default("general")
  type      String   @default("string")
}

model Project {
  projectId    String    @id @default(cuid())
  title        String
  description  String?
  slug         String    @unique
  image        String?
  status       String    @default("PUBLISHED")
  platforms    String[]  @default([])
  technologies String[]  @default([])
  content      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @default(now()) @updatedAt
  projectLinks String[]
}

// Appointment Scheduling
enum AppointmentStatus {
  PENDING
  BOOKED
  CANCELLED
  COMPLETED
}

model Appointment {
  appointmentId String   @id @default(cuid())

  startTime DateTime @db.Timestamptz
  endTime   DateTime @db.Timestamptz

  name          String
  email         String
  phone         String
  note          String?

  status AppointmentStatus @default(PENDING)
  createdAt DateTime          @default(now())

}

model Like {
  likeId String @id @default(cuid())

  postId String
  post   Post   @relation(fields: [postId], references: [postId], onDelete: Cascade)

  // Kayıtlı kullanıcı beğenisi
  userId String?
  user   User?   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  // Anonim kullanıcılar için IP ve/veya fingerprint
  ipAddress         String?
  deviceFingerprint String?

  createdAt DateTime @default(now())

  @@unique([postId, userId]) // Bir kullanıcı bir postu sadece 1 kez beğenebilir
  @@unique([postId, ipAddress, deviceFingerprint]) // Aynı anonimin tekrarlayan beğenisini engellemek için
  @@index([postId])
  @@index([userId])
  @@index([ipAddress, deviceFingerprint])
}
