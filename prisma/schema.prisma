// Auth, Blog, and Profile schemas

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {

  userId            String          @id @default(cuid())
  name          String?

  email         String          @unique
  emailVerified DateTime?

  password      String?

  sessions      Session[] 

  role          String          @default("USER")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Post Post[]

  Comment Comment[]
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expiresAt      DateTime
  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
 
model Post {
  postId          String   @id @default(cuid())
  title           String
  content         String

  published       Boolean  @default(false)
  author          User     @relation(fields: [authorId], references: [userId])

  authorId        String
  description     String?
  slug            String   @unique

  keywords        String[] // List of SEO keywords
  image        String?  // URL of the image stored in AWS S3
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  
  categoryId      String
  Category Category @relation(fields: [categoryId], references: [categoryId])

  Comment Comment[]
}

model Category {
  categoryId      String   @id @default(cuid())
  title           String

  description     String?

  slug            String   @unique

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Post Post[]
}

model Comment {
  commentId       String   @id @default(cuid())
  isAnonymous     Boolean  @default(false)

  content         String
  createdAt       DateTime @default(now())

  postId          String
  post            Post     @relation(fields: [postId], references: [postId])

  userId          String?
  user            User?    @relation(fields: [userId], references: [userId])

  parentId        String?
  parent          Comment? @relation("CommentToComment", fields: [parentId], references: [commentId])

  comment Comment[] @relation("CommentToComment")
} 
