generator client {
  provider   = "prisma-client-js"
  accelerate = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId                 String    @id @default(cuid())
  name                   String?
  email                  String    @unique
  emailVerified          DateTime?
  password               String?
  role                   String    @default("USER")
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  adressCity             String?
  adressCountry          String?
  adressLine1            String?
  adressLine2            String?
  adressState            String?
  adressZip              String?
  emailVerificationToken String?
  image                  String?
  passwordResetToken     String?
  phone                  String?
  phoneVerificationToken String?
  phoneVerified          DateTime?
  slug                   String?   @unique

  coverImage             String?

  Post                   Post[]
  sessions               Session[]
}

model Session {
  sessionToken String   @unique
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  expires      DateTime
  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Post {
  postId      String    @id @default(cuid())
  title       String
  content     String
  authorId    String
  description String?
  slug        String    @unique
  keywords    String[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  
  categoryId  String
  image       String?
  publishedAt DateTime  @default(now())
  status      String    @default("PUBLISHED")
  Comment     Comment[]
  author      User      @relation(fields: [authorId], references: [userId])
  Category    Category  @relation(fields: [categoryId], references: [categoryId])

  //analytics
  views       Int       @default(0)
}

model Category {
  categoryId  String   @id @default(cuid())
  title       String
  description String?
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  image       String?
  keywords    String[]
  Post        Post[]
}

model Comment {
  commentId   String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  postId      String
  name        String?
  email       String?
  parentId    String?
  parent      Comment?  @relation("CommentToComment", fields: [parentId], references: [commentId])
  children     Comment[] @relation("CommentToComment")
  post        Post      @relation(fields: [postId], references: [postId])
}

model ContactForm {
  contactId String   @id @default(cuid())
  name      String
  email     String
  phone     String
  message   String
  createdAt DateTime @default(now())
}

model Subscription {
  email     String    @id @unique
  createdAt DateTime  @default(now())
  deletedAt DateTime?
}

model Setting {
  key   String @id @unique
  value String
  type  String @default("string")
  group String @default("general") // general, seo, social, mail, analytics

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectLink {
  linkId    String   @id @default(cuid())
  projectId String 
  title     String
  url       String
  icon      String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Project   Project @relation(fields: [projectId], references: [projectId])
}

model Project {
  projectId    String      @id @default(cuid())

  title        String
  description  String?
  content      String

  slug         String      @unique

  image        String?

  status       String      @default("PUBLISHED")

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt @default(now())
  
  platforms   String[]    @default([]) // WEB, MOBILE, DESKTOP, IOT, AI, BLOCKCHAIN
  technologies String[]   @default([]) // REACT, ANGULAR, VUE, FLUTTER, SWIFT, KOTLIN, JAVA, NODEJS, PYTHON, DJANGO, RUBY, RAILS, PHP, LARAVEL, ASP.NET, C#, GO, RUST, C++, C, R, SCALA, HASKELL, ERLANG, ELIXIR, RUBY, RAILS, CRYSTAL, SQL, NOSQL, MONGODB, POSTGRESQL, MYSQL, SQLITE, REDIS, ELASTICSEARCH, KAFKA, RABBITMQ, DOCKER, KUBERNETES, AWS, GCP, AZURE, HEROKU, DIGITALOCEAN, VULTR, LINODE, NETLIFY, VERCCEL, GITHUB, GITLAB, BITBUCKET, JENKINS, CIRCLECI, TRAVIS, SEMAPHORE, CODESHIP, SONARCLOUD, SONARQUBE, JIRA, TRELLO, ASANA, SLACK, ZOOM, GOOGLE MEET, MICROSOFT TEAMS, DISCORD, TWILIO, SENDGRID, MAILGUN, POSTMARK, TWILIO, STRIPE, PAYPAL, RAZORPAY, PAYTM, GOOGLE PAY, PHONEPE, APPLE PAY, ANDROID PAY, UPI, PAYMENT GATEWAY, SMS GATEWAY, OTP, AUTHENTICATION, AUTHORIZATION, JWT, OAUTH, OPENID, SAML, SSO, MFA, 2FA, FIREBASE, FIRESTORE, REALTIME DATABASE, STORAGE, AUTHENTICATION, ANALYTICS, CRASHLYTICS, PERFORMANCE, TEST LAB, REMOTE CONFIG, IN APP MESSAGING, CLOUD MESSAGING, NOTIFICATIONS, ADWORDS, ADMOB, GOOGLE ANALYTICS, PLAY STORE, APP STORE, PWA, PROGRESSIVE WEB APP, AMP, ACCELERATED MOBILE PAGES, SEO, SEARCH ENGINE OPTIMIZATION, SEM, SEARCH ENGINE MARKETING, SMM, SOCIAL MEDIA MARKETING, SMO, SOCIAL MEDIA OPTIMIZATION, EMAIL
  links        ProjectLink[]
}
