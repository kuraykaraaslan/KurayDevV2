import React, { useState, useEffect } from "react";
import { CircleFlag } from "react-circle-flags";
import useGlobalStore from "@/libs/zustand";
import i18n from "@/libs/localize/localize";
//de, en, et, gr, mt, th, tr


const LangButton = () => {


  const { language, setLanguage, availableLanguages } = useGlobalStore();

  const { t } = i18n;

  const languageFlags = {
    "en": "us",
    "tr": "tr",
    "de": "de",
    "gr": "gr",
    "et": "ee",
    "mt": "mt",
    "th": "th",
  };


  const nextLanguage = () => {
    const currentIndex = availableLanguages.indexOf(language);

    var nextLanguage: string;

    switch (currentIndex) {
      case -1:
        nextLanguage = availableLanguages[0];
        break;
      case availableLanguages.length - 1:
        nextLanguage = availableLanguages[0];
        break;
      default:
        nextLanguage = availableLanguages[currentIndex + 1];
        break;
    }
    setLanguage(nextLanguage);
  };

  useEffect(() => {

    // At bottom of i18n.ts
    useGlobalStore.persist.onFinishHydration((state) => {
      console.log("Hydration finished", state);
      // Check if the language is available in the resources
      if (availableLanguages.includes(state.language)) {
        i18n.changeLanguage(state.language).then(() => {
          i18n.emit("languageChanged", state.language);
        });
      } else {
        // Fallback to default language if not available
        i18n.changeLanguage("en").then(() => {
          i18n.emit("languageChanged", "en");
        });
      }
    });

    // Also still keep your normal subscription for later changes
    useGlobalStore.subscribe((state) => {
      if (i18n.language !== state.language) {
        i18n.changeLanguage(state.language).then(() => {
          i18n.emit('languageChanged', state.language);
        });
      }
    });


  }, []);


  return (
    <button
      className="btn btn-square btn-ghost rounded-full items-center justify-center duration-300"
      onClick={nextLanguage}
    >
      <CircleFlag
        height="24"
        width="24"
        countryCode={languageFlags[language as keyof typeof languageFlags] ? languageFlags[language as keyof typeof languageFlags] : "us"}
      />
    </button>
  );
};

export default LangButton;
